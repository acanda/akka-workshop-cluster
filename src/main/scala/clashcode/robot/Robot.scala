package clashcode.robot

/** a robot is represented by its genetic code and its points (fitness) */
case class Robot(code: RobotCode, points: Int)

/** the genetic code (128 bytes with values 0 to 5) that represents the decisions of the robot in all 128 situations */
case class RobotCode(code: Array[Byte]) {

  if (code.length != Situations.count) throw new IllegalArgumentException("Length of code must be " + Situations.count)

  /** evaluate this code */
  def evaluate : Robot = {
    val decisions = toDecisions
    val points = Evaluator.evaluate(decisions)
    Robot(this, points)
  }

  /** get decisions from this code */
  private def toDecisions : IndexedSeq[Decision] = {
    try {
      code.map(decisionIndex => Decisions.all(decisionIndex))
    }
    catch {
      case ex: IndexOutOfBoundsException =>
        throw new IllegalArgumentException("Invalid robot code found. Please make sure your generated byte array consists of values from 0 to 5")
    }
  }
}

